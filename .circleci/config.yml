# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The python orb contains a set of prepackaged circleci configuration you can use repeatedly in your configurations files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
  test:  # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.7
#    environment:
#      DISPLAY: mymachine.com:0.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          app-dir: PyQT5_fbs/requirements  # If you're requirements.txt isn't in the root directory.
          pip-dependency-file: mac.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
          pypi-cache: false
      - run:
          name: Run tests
          command: python -m unittest
  build-mac:
    macos:
      xcode: 11.7.0
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
      FL_OUTPUT_DIR: output
      PYTHON_CONFIGURE_OPTS: --enable-framework
    steps:
      - checkout
      - add_ssh_keys
      # Commands will execute in macOS container
      # with Xcode 12.5.1 installed
      - store_test_results:
          path: output/scan
      - store_artifacts:
          path: output
      - run: rsync --version
      - attach_workspace:
          at: src
#      - run: cd PyQT5_fbs/requirements && scp -r ./base.txt komar@wyrtki.soest.hawaii.edu:/srv/htdocs/uhslc.soest.hawaii.edu/komar/myrsync/
      - run: |
           cd PyQT5_fbs/requirements
           echo 'wyrtki.soest.hawaii.edu ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBAJJyf1/zR4Lt5IA/+dY1VIqBHi5ZUx9/PYIYiHEW6b8rZBnR7gu7U7iqJiBn3Ob9m3YpQgqZD47zaaaHQ/Ykkc=' >> ~/.ssh/known_hosts
           rsync -va ./base.txt komar@wyrtki.soest.hawaii.edu:/srv/htdocs/uhslc.soest.hawaii.edu/komar/myrsync/
#      - run: xcodebuild -version
#      - run: python3 --version
##      - run: cd "$(brew --repository)" && git fetch && git reset --hard origin/master
##      - run: brew update
##      - run: chsh -s /bin/zsh
#      - run: echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bash_profile
#      - run: echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bash_profile
#      - run: echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\n  eval "$(pyenv init -)"\nfi' >> ~/.bash_profile
#      - run: brew install freetype pkg-config libpng pyenv openssl readline sqlite3 xz zlib
#      - run: echo $PYTHON_CONFIGURE_OPTS && cd PyQT5_fbs && pyenv install 3.6.7
#      - run: cd PyQT5_fbs && pyenv versions
#      - run: cd PyQT5_fbs && pyenv local 3.6.7 && pyenv versions && pip3 install -r requirements/mac.txt
#      - run: cd PyQT5_fbs && fbs freeze
#      # fbs 0.7.4 has a bug when running the installer. It exits with non zero code but it still produces the dmg
#      # For that reason forcing this job to pass with || true
#      # The bug was fixed in fbs 0.9.5 but that fbs requires other dependencies that break other things...
#      - run: cd PyQT5_fbs && fbs installer || true
##      - run: cd PyQT5_fbs/target
#      - attach_workspace:
#          at: src
#      - run: cd PyQT5_fbs/target && scp -r /UHSLC-QC.dmg komar@wyrtki.soest.hawaii.edu:/srv/htdocs/uhslc.soest.hawaii.edu/komar/myrsync/
#      - run: |
#         cd PyQT5_fbs/target
#         echo 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBKFbbcnvFxtiBWcrhI9rHhzaDXISdsSmoNX0wtjR+md komar@hawaii.edu' >> ~/.ssh/known_hosts
#         rsync -va ./UHSLC-QC.dmg komar@wyrtki.soest.hawaii.edu:/srv/htdocs/uhslc.soest.hawaii.edu/komar/myrsync/


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  test_build:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
    jobs:
#      - test
      - build-mac
#          requires:
#            - test
